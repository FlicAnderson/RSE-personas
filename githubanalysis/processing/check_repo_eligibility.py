""" Checks whether given GitHub repository is eligible for analysis."""

import githubanalysis.processing.setup_github_auth as ghauth


def check_repo_eligibility(in_filename='gh_stats', read_in_location='data/'):
    """
    Reads in gh_stats file and checks whether each GitHub repository meets eligibility
    criteria for analysis in coding-smart study.   
    Returns csv file with additional colummn(s) of eligibility bool (?and additional information?)  


    :param in_filename: name of CSV file to read in, excluding file extension. Default = "gh_urls".
    :type: str
    :param read_in_location: path of Github URLs file as string. Default = "data/"
    :type: str
    :returns: `gh_stats_eligible_df`
    :type: pd.DataFrame df equivalent to gh_stats with additional column(s)  


    Examples:
    ----------
    >>> check_repo_eligibility(in_filename='gh_stats_2024-02-14-eidf.csv', read_in_location='data/')
    TODO
    """


    # Read in gh_stats file generated by gather_gh_stats.py 

    # check each column (stat) in each row (repo) for inclusion/exclusion.  
    
    # mark repo as included/excluded 
    
    # generate NEW gh_stats file with subset of eligible repos?  







    # This function will require output from githubanalysis.processing.summarise_repo_stats() function.
    # Will return repo_eligible = True if repo meets inclusion/exclusion criteria.
        # Criteria should be set either in separate config file or as function arguments (ease of use/reproducibility)

    # Dev Numbers:
        # repo has > 1 dev
        # repo has < 1000 devs

    # Commits:
        # > 100 commits? > 500?

    # Has PRs:
        # has PRs

    # Is RS:
        # (will be TRUE since the gh repo url should have come via zenodocode therefore has associated DOI)

    # Issue Tickets:
        # uses issue tickets
        # has > 10 issue tickets

    # Recent Activity:
        # has commit within last 12 months? 18 months?
        # last PR activity within last 12 months?
    
    # Repo Age:
        # repo is established, >3 years old.

    # Licence:
        # has open license allowing me to work w/ it

    # Accessibility:
        # repo is set to public

    # ?? Repo Content:
        # repo contains code, not just docs or data.
        # look for file endings.

    # Repo Language:
        # contains some of: python, (shell?), (R?), java, C, C++, (FORTRAN???)


