"""Checks whether given GitHub repository is eligible for analysis."""


def check_repo_eligibility(
    in_filename="summarised_repo_stats", read_in_location="data/"
):
    """
    Reads in summarised_repo_stats logfile generated by read_summary_stats_log.py
    and checks whether each GitHub repository meets eligibility criteria
    for analysis in coding-smart study.
    Returns csv file with additional colummn(s) of eligibility bool (?and additional information?)


    :param in_filename: name of CSV file to read in, excluding file extension. Default = "summarised_repo_stats".
    :type: str
    :param read_in_location: path of Github URLs file as string. Default = "data/"
    :type: str
    :returns: `summarised_repo_stats_eligible_df`
    :type: pd.DataFrame df equivalent to summarised_repo_stats with additional column(s)


    Examples:
    ----------
    >>> check_repo_eligibility(in_filename='summarised_repo_stats_2025-03-26.csv', read_in_location='data/')
    TODO
    """

    # Read in summarised_repo_stats file generated by read_summary_stats_log.py

    # check each column (stat) in each row (repo) for inclusion/exclusion.

    # mark repo as included/excluded

    # generate NEW summarised_repo_stats file with subset of eligible repos?

    # This function will require processed df output
    # `summarised_repo_stats_2025-03-26.csv` from log file output
    # created by githubanalysis.processing.summarise_repo_stats() function.

    # Will return repo_eligible = True if repo meets inclusion/exclusion criteria.
    # Criteria should be set either in separate config file or as function arguments (ease of use/reproducibility)

    # Dev Numbers:
    # repo has > 1 dev
    # repo has < 1000 devs

    # Commits:
    # > 100 commits? > 500?

    # Has PRs:
    # has PRs

    # Is RS:
    # (will be TRUE since the gh repo url should have come via zenodocode therefore has associated DOI)

    # Issue Tickets:
    # uses issue tickets
    # has > 10 issue tickets

    # Recent Activity:
    # has commit within last 12 months? 18 months?
    # last PR activity within last 12 months?

    # Repo Age:
    # repo is established, >3 years old.

    # Licence:
    # has open license allowing me to work w/ it

    # Accessibility:
    # repo is set to public

    # ?? Repo Content:
    # repo contains code, not just docs or data.
    # look for file endings.

    # Repo Language:
    # contains some of: python, (shell?), (R?), java, C, C++, (FORTRAN???)
